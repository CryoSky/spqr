#!/bin/bash
set -e
echo "SPQR_MINI: quick energy minimization of PDB files with SPQR."

#PARAMETERS#
SPQR_PATH=/home/spoblete/data/52_ernwin_big/09_NEW_MINI/spqr/
ENERGY_PATH=$SPQR_PATH/interactions
BIN_PATH=$SPQR_PATH/bin
TOOLS_PATH=$SPQR_PATH/tools
INTRAC=intrac.btb
NPROC=1
MPROC=$((NPROC - 1))
CLASH_NMC=20000
CLASH_NSA=10
CLASH_TSA=1
ERMSD_NMC=100
ERMSD_NSA=5
ERMSD_TSA=1
ERMSD_NTO=$((ERMSD_NMC*ERMSD_NSA))
ENERG_NMC=1000
ENERG_NSA=5
ENERG_TSA=1
LNKRM_NMC=100000
LNKRM_TMC=6
BINCLASH=SPQR_wSA
BINANNOT=SPQR_ENERG
BINERMSD=SPQR_eSA
BINENERG=SPQR_SA
BINLNKRMV=SPQR_cMC
ERMSD_PREF=5000
ERMSD_CUTOFF=100
############

#PARSE ARGUMENTS#
PDBSTRUCT=""
NAME=""
PARAMS=""
CONVERT=""
LINKDCHECK=""
SSTRUCT=""
LNKRMV=""

show_usage ()
{
    echo "Usage: SPQR_MINI -i <input_file> [ -o <output_suffix> ] [ -c ]  [ -t <secondary structure file> ]"
    echo "input_file must be in SPQR-pdb format. If not, the flag -c will take care of that."
    echo "Secondary structure is optional. It must contain the sequence in the first line and the secondary structure in Vienna format in the second line."
}

write_params ( )
{
    #c_params, sa_params, file, typ )
    file=$1
    echo "TEMPERATURE     "$2 > $file
    echo "PDB_OUTPUT	  "$3 >> $file
    echo "RG_COUPL	  "$4 " " $5 >> $file
    echo "MC_PH_XYZ 	  "$6 >> $file
    echo "MC_NT_XYZ	  "$7 >> $file
    echo "MC_STEPS        "$8 >> $file
    echo "MC_TRAJ_STEPS   "$9 >> $file
    echo "MC_CHKP_STEPS   "${10} >> $file
    echo "RANDOM_SEED     "${11} >> $file
    echo "MC_NT_ANGLE     "${12}  " " ${13} >> $file
    echo "ENERGS_PATH     "${14}  >> $file
    if [ "${15}" -eq 1 ] ; then 
	echo "SA_TINI		"${16}  >> $file
	echo "SA_TMIN		"${17}  >> $file
	echo "SA_TFAC		"${18}  >> $file
	echo "SA_STEP		"${19}  >> $file
	echo "SA_NT		"${20}  >> $file
	echo "SA_PREENERG	"${21}  >> $file
	echo "SA_SFAC		"${22}  >> $file
	echo "SA_RTIMES	        "${23}  >> $file
    fi
}

#DEFAULTS#
MC_PARAMS=(3 0 0 0 0.2 0.1 1 1000000 1000000 10 0.03 0.1 intrac)
SA_PARAMS=(sa_ti 0.4 0.75 0 sa_nt  0 0.75 0)
##########

while (( "$#" )); do
    case "$1" in
	-i|--pdb-file)
	    PDBSTRUCT=$2
	    shift 2
	    ;;
	-o|--output)
	    NAME=$2
	    shift 2
	    ;;
	-c|--convert)
	    CONVERT=1
	    shift
	    ;;
	-d|--doublecheck)
	    LINKDCHECK=1
	    shift
	    ;;
	-t|--sstruct)
	    LNKRMV=1
	    SSTRUCT=$2
	    shift 2
	    ;;	
	-h|--help)
	    show_usage
	    exit 1
	    ;;
	--) # end argument parsing
	    shift
	    break
	    ;;
	-*|--*=) # unsupported flags
	echo "Error: Unsupported flag $1" >&2
	exit 1
	;;
	*) # preserve positional arguments
	    PARAMS="$PARAMS $1"
	    shift
	    ;;
    esac
done

if [ ! $SPQR_PATH  ] ; then
    echo "ERROR: No SPQR path specified. Change the SPQR_PATH variable in the script."
    exit 1
fi

if [ ! $PDBSTRUCT ] ; then
    echo "No pdb file introduced!"
    show_usage
    exit 1
fi

if [ ! $NAME ] ; then
    NAME=$PDBSTRUCT
fi

DIRNAME=miniSPQR_$NAME
if [ -d "$DIRNAME" ] ; then
    echo "Directory $DIRNAME already exists. Please rename the output."
    exit 1
fi

echo "Saving output to directory "$DIRNAME
# set positional arguments in their proper place
eval set -- "$PARAMS"
#################

#STEP 1#
THISSIM=01
mkdir $DIRNAME
if [ $CONVERT ] ; then 
    echo "Creating SPQR pdb format structure..."
    cp $TOOLS_PATH/pdb2spqr.py .
    python pdb2spqr.py $PDBSTRUCT > $DIRNAME/init.pdb
    rm pdb2spqr.py
else cp $PDBSTRUCT $DIRNAME/init.pdb
fi
echo "Creating files for clash removal..."
mkdir $DIRNAME/$THISSIM
MCPARAMS1=(${MC_PARAMS[@]})
SAPARAMS1=(${SA_PARAMS[@]})
MCPARAMS1[6]=$CLASH_NMC
MCPARAMS1[7]=$((CLASH_NMC*CLASH_NSA+1))
MCPARAMS1[8]=$((CLASH_NMC*CLASH_NSA+1))
MCPARAMS1[12]="$ENERGY_PATH/$INTRAC"
SAPARAMS1[0]=$CLASH_TSA
SAPARAMS1[4]=$CLASH_NSA
write_params $DIRNAME/$THISSIM/params.spqr ${MCPARAMS1[@]} 1 ${SAPARAMS1[@]}
mkdir $DIRNAME/$THISSIM/pdb_inits
cp $DIRNAME/init.pdb $DIRNAME/$THISSIM/pdb_inits/init.pdb
cp $BIN_PATH/$BINCLASH $DIRNAME/$THISSIM
cp $BIN_PATH/$BINANNOT $DIRNAME/$THISSIM


if [ "$LNKRMV" ]; then
    cp $TOOLS_PATH/SPQR_DLINK.py $DIRNAME/$THISSIM
    cp $SSTRUCT $DIRNAME/$THISSIM
    NPSSTRUCT=`basename $SSTRUCT`
fi
echo "Setting up the parameters for clashing removal..."
echo "Running clash removal annealing..."
cd $DIRNAME/$THISSIM
for iconf in `seq 0 $MPROC`;do
    ./$BINCLASH -i $iconf > clash_$NAME.out
done
touch temp1; rm temp1 ; touch temp2 ; rm temp2
for iconf in `seq 0 $MPROC`;do
    IND=`printf %02d $iconf`
    mcconf=configs/chk.last.p$IND.mc
    ./$BINANNOT $mcconf -t > temp2
    fc=`grep "No clashes found" temp2 | wc | awk '{print $1}'`
    en=`grep "TOTAL ENERGY" temp2 | awk '{print $4}'`
    if [ "$fc" -eq "1" ] ; then echo $mcconf $en >>  temp1 ; fi
done
if [ ! -f temp1 ] ; then echo "There are still clashes in the initial condition. Try increasing the CLASH_NMC variable in the script." ; exit ; fi
NSEL=`wc temp1 | awk '{print $1}'`
sort -g -k 2 temp1 > temp3;
SELECTED=`head -1 temp3 | awk '{print $1}'` ;
cp $SELECTED ../01.mc
slinit=`echo $SELECTED | awk 'BEGIN {FS="."}; {print $3}'`
PDBSELECTED=final.$slinit.pdb

LNKFLAG=""
if [ "$LNKRMV" ]; then
    echo "Detecting links between loops..."
    python SPQR_DLINK.py -i $PDBSELECTED -t $NPSSTRUCT -o linked_loops.lst -p > dlink.out
    NLDL=`wc dlink.out | awk '{print $1}'`
    if [ $LINKDCHECK ] ; then
	if [ "$NLDL" -gt "0" ] ; then 
	    echo "Piercings detected. Checking Gauss integrals."
	    python SPQR_DLINK.py -i $PDBSELECTED -t $NPSSTRUCT -o linked_loops.lst > dlink.out
	fi
    fi
    if [ -s linked_loops.lst ] ; then
	LNKFLAG=1
	echo "Links detected. Removal will be needed"
    fi
fi

rm temp1 temp2 temp3
cd ../..
echo "Clashes removed successfuly"

#######
#HERE DETECT AND REMOVE LINKS IF THEY EXIST!#
if [ "$LNKRMV" ] && [ "$LNKFLAG"  ]; then
    echo "Attempting to remove links..."
    THISSIM=LR1
    PREVSIM=01
    mkdir $DIRNAME/$THISSIM
    MCPARAMSL1=(${MC_PARAMS[@]})
    SAPARAMSL1=(${SA_PARAMS[@]})
    MCPARAMSL1[0]=$LNKRM_TMC
    MCPARAMSL1[6]=$LNKRM_NMC
    MCPARAMSL1[7]=$LNKRM_NMC
    MCPARAMSL1[8]=$LNKRM_NMC
    MCPARAMSL1[12]="$ENERGY_PATH/$INTRAC"
    SAPARAMSL1[0]=$CLASH_TSA
    SAPARAMSL1[4]=$CLASH_NSA
    write_params $DIRNAME/$THISSIM/params.spqr ${MCPARAMSL1[@]} 0 ${SAPARAMSL1[@]}
    mkdir $DIRNAME/$THISSIM/pdb_inits
    cp $DIRNAME/$PREVSIM/$SELECTED $DIRNAME/$THISSIM/pdb_inits/init.mc
    cp $DIRNAME/$PREVSIM/$PDBSELECTED $DIRNAME/$THISSIM/pdb_inits/init.pdb
    cp $DIRNAME/$PREVSIM/linked_loops.lst $DIRNAME/$THISSIM
    cp $BIN_PATH/$BINLNKRMV $DIRNAME/$THISSIM
    cp $TOOLS_PATH/SPQR_DLINK.py $DIRNAME/$THISSIM
    cp $SSTRUCT $DIRNAME/$THISSIM
    NPSSTRUCT=`basename $SSTRUCT`
    cd $DIRNAME/$THISSIM
    #python SPQR_DLINK.py -i pdb_inits/init.pdb -t $NPSSTRUCT -o linked_loops.lst
    ./$BINLNKRMV $iconf > lnkrmv_$NAME.$iconf.out
    check=`python SPQR_DLINK.py -i final.p00.pdb -t $NPSSTRUCT -o check -p`
    if [ "$check" ] ; then
	echo "ERROR: Link not removed. Try longer simulations increasing the LINKRM_NMC variable in the script."
	exit 1
    fi
    SELECTED=configs/chk.last.p00.mc
    cd ../..
    echo "Links removed. Proceeding to remove clashes."

    ########

    #NOW, REMOVE CLASHES ONCE MORE#
    THISSIM=LR2
    PREVSIM=LR1
    mkdir $DIRNAME/$THISSIM
    MCPARAMSL2=(${MC_PARAMS[@]})
    SAPARAMSL2=(${SA_PARAMS[@]})
    MCPARAMSL2[6]=$CLASH_NMC
    MCPARAMSL2[7]=$((CLASH_NMC*CLASH_NSA+1))
    MCPARAMSL2[8]=$((CLASH_NMC*CLASH_NSA+1))
    MCPARAMSL2[12]="$ENERGY_PATH/$INTRAC"
    SAPARAMSL2[0]=$CLASH_TSA
    SAPARAMSL2[4]=$CLASH_NSA
    write_params $DIRNAME/$THISSIM/params.spqr ${MCPARAMSL2[@]} 1 ${SAPARAMSL2[@]}
    mkdir $DIRNAME/$THISSIM/pdb_inits
    #cp $DIRNAME/$PREVSIM/configs/chk.last.p00.mc $DIRNAME/$THISSIM/pdb_inits/init.mc
    cp $DIRNAME/$PREVSIM/final.p00.pdb $DIRNAME/$THISSIM/pdb_inits/init.pdb
    sed -i 's/NN/NA/g' $DIRNAME/$THISSIM/pdb_inits/init.pdb
    cp $BIN_PATH/$BINCLASH $DIRNAME/$THISSIM
    cp $BIN_PATH/$BINANNOT $DIRNAME/$THISSIM
    cd $DIRNAME/$THISSIM
    for iconf in `seq 0 $MPROC`;do
	./$BINCLASH -i $iconf > clash_$NAME.out
    done
    touch temp1; rm temp1 ; touch temp2 ; rm temp2
    for iconf in `seq 0 $MPROC`;do
	IND=`printf %02d $iconf`
	mcconf=configs/chk.last.p$IND.mc
	./$BINANNOT $mcconf -t > temp2
	fc=`grep "No clashes found" temp2 | wc | awk '{print $1}'`
	en=`grep "TOTAL ENERGY" temp2 | awk '{print $4}'`
	if [ "$fc" ] ; then echo $mcconf $en >>  temp1 ; fi
    done
    if [ ! -f temp1 ] ; then echo "There are still clashes in the initial condition. Try increasing the CLASH_NMC variable in the script." ; exit ; fi
    NSEL=`wc temp1 | awk '{print $1}'`
    sort -g -k 2 temp1 > temp3;
    SELECTED=`head -1 temp3 | awk '{print $1}'` ;
    slinit=`echo $SELECTED | awk 'BEGIN {FS="."}; {print $3}'`
    PDBSELECTED=final.$slinit.pdb
    rm temp1 temp2 temp3
    cp $SELECTED ../01.mc
    cd ../..
    echo "Links removed successfuly"
else
    echo "Skipped detection of links"
fi

########

#STEP 2#
echo "Structure refinement: minimization of ERMSD with respect to original structure"
THISSIM=02
PREVSIM=01
mkdir $DIRNAME/$THISSIM
mkdir $DIRNAME/$THISSIM/pdb_inits
MCPARAMS2=(${MC_PARAMS[@]})
SAPARAMS2=(${SA_PARAMS[@]})
MCPARAMS2[6]=$ERMSD_NMC
MCPARAMS2[7]=$ERMSD_NMC
MCPARAMS2[8]=$ERMSD_NMC
MCPARAMS2[12]=$ENERGY_PATH/$INTRAC
SAPARAMS2[0]=$ERMSD_TSA
SAPARAMS2[4]=$ERMSD_NSA
write_params $DIRNAME/$THISSIM/params.spqr ${MCPARAMS2[@]} 1 ${SAPARAMS2[@]}
cp $DIRNAME/$PREVSIM.mc $DIRNAME/$THISSIM/pdb_inits/init.mc
echo  "REMARK ERMSD PARAMS 1  $ERMSD_CUTOFF" > $DIRNAME/$THISSIM/ermsd_frags.lst
NATS=`wc $DIRNAME/init.pdb | awk '{print $1}'`; NGROUPS=`echo $NATS | awk '{print int($1/5)-1}'` 
echo "REMARK ERMSD GROUP $ERMSD_PREF `seq 0 $NGROUPS | tr "\n" " " `" >> $DIRNAME/$THISSIM/ermsd_frags.lst
grep -v REMARK $DIRNAME/init.pdb >> $DIRNAME/$THISSIM/ermsd_frags.lst
#; mv ermsd_frags.lst $DIRNAME/$THISSIM
cp $BIN_PATH/$BINERMSD $DIRNAME/$THISSIM
cd $DIRNAME/$THISSIM
./$BINERMSD > ermsd_$NAME.out
cd ../..
echo "ERMSD minimization successful!"

########

#STEP 3#
echo "Structure refinement: minimization of SPQR energy"
THISSIM=03
PREVSIM=02
mkdir $DIRNAME/$THISSIM
mkdir $DIRNAME/$THISSIM/pdb_inits
MCPARAMS3=(${MC_PARAMS[@]})
SAPARAMS3=(${SA_PARAMS[@]})
MCPARAMS3[6]=$ENERG_NMC
MCPARAMS3[7]=$ENERG_NMC
MCPARAMS3[8]=$ENERG_NMC
MCPARAMS3[12]=$ENERGY_PATH/$INTRAC
SAPARAMS3[0]=$ENERG_TSA
SAPARAMS3[4]=$ENERG_NSA                                                                                                                           
write_params $DIRNAME/$THISSIM/params.spqr ${MCPARAMS3[@]} 1 ${SAPARAMS3[@]}
for p in `seq 0 $MPROC` ; do
    pind=`printf %02d $p`
    SEL_ERMSD_FILE=`ls -t $DIRNAME/$PREVSIM/configs/chk.last.p$pind.mc | head -1`
    cp $SEL_ERMSD_FILE $DIRNAME/$THISSIM/pdb_inits/init.p$pind.mc
done
cp $BIN_PATH/$BINENERG $DIRNAME/$THISSIM
cd $DIRNAME/$THISSIM
./$BINENERG  > energ_$NAME.out
cp final.p* ..
cp configs/chk.last.p*.mc ..
cp $TOOLS_PATH/SPQR_BBACKMAP.py .
for cgstruct in `ls final.p*`; do
    IND=`echo $cgstruct | awk 'BEGIN {FS="."}; {print $2}'`
    python SPQR_BBACKMAP.py -i $cgstruct -o mini_at_$IND.pdb
done
cp mini_at_*.pdb ..
cd ../..


########
#CLEANING
rm $DIRNAME/01.mc

echo "Optimization successfully ended."

########
#END
#################
