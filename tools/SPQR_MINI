#!/bin/bash
set -e
echo "SPQR_MINI: quick energy minimization of PDB files with SPQR."

#PARAMETERS#
SPQR_PATH=/home/spoblete/data/53_ernwin_contacts/01_thiel_jan/spqr
ENERGY_PATH=$SPQR_PATH/interactions
BIN_PATH=$SPQR_PATH/bin
TOOLS_PATH=$SPQR_PATH/tools
SRC_DIR=mini_files
INTRAC=no_bph_intrac.btb
NPROC=1
MPROC=$((NPROC - 1))
CLASH_NMC=20000
CLASH_NSA=10
CLASH_TSA=1
ERMSD_NMC=100
ERMSD_NSA=5
ERMSD_TSA=1
ERMSD_NTO=$((ERMSD_NMC*ERMSD_NSA))
ENERG_NMC=1000
ENERG_NSA=5
ENERG_TSA=1
BINCLASH=SPQR_wSA
BINANNOT=SPQR_ENERG
BINERMSD=SPQR_eSA
BINENERG=SPQR_SA
ERMSD_PREF=5000
ERMSD_CUTOFF=4
############

#PARSE ARGUMENTS#
PDBSTRUCT=""
NAME=""
PARAMS=""
CONVERT=""
show_usage ()
{
    echo "Usage: SPQR_MINI -i <input_file> [ -o <output_suffix> ] [ -c ]"
    echo "input_file must be in SPQR-pdb format. If not, the flag -c will take care of that."
}

write_params ( )
{
    #c_params, sa_params, file, typ )
    file=$1
    echo "TEMPERATURE     "$2 > $file
    echo "PDB_OUTPUT	  "$3 >> $file
    echo "RG_COUPL	  "$4 >> $file
    echo "MC_PH_XYZ 	  "$5 >> $file
    echo "MC_NT_XYZ	  "$6 >> $file
    echo "MC_STEPS        "$7 >> $file
    echo "MC_TRAJ_STEPS   "$8 >> $file
    echo "MC_CHKP_STEPS   "$9 >> $file
    echo "RANDOM_SEED     "${10} >> $file
    echo "MC_NT_ANGLE     "${11}  " " ${12} >> $file
    echo "ENERGS_PATH     "${13}  >> $file
    if [ "${14}" -eq 1 ] ; then 
	echo "SA_TINI		"${15}  >> $file
	echo "SA_TMIN		"${16}  >> $file
	echo "SA_TFAC		"${17}  >> $file
	echo "SA_STEP		"${18}  >> $file
	echo "SA_NT		"${19}  >> $file
	echo "SA_PREENERG	"${20}  >> $file
	echo "SA_SFAC		"${21}  >> $file
	echo "SA_RTIMES	        "${22}  >> $file
    fi
}

#DEFAULTS#
MC_PARAMS=(1 0 0 0.2 0.1 1 1 1 10 0.03 0.1 intrac)
SA_PARAMS=(sa_ti 0.4 0.75 0 sa_nt  0 0.75 0)
##########

while (( "$#" )); do
    case "$1" in
	-i|--pdb-file)
	    PDBSTRUCT=$2
	    shift 2
	    ;;
	-o|--output)
	    NAME=$2
	    shift 2
	    ;;
	-c|--convert)
	    CONVERT=1
	    shift
	    ;;
	-h|--help)
	    show_usage
	    exit 1
	    ;;
	--) # end argument parsing
	    shift
	    break
	    ;;
	-*|--*=) # unsupported flags
	echo "Error: Unsupported flag $1" >&2
	exit 1
	;;
	*) # preserve positional arguments
	    PARAMS="$PARAMS $1"
	    shift
	    ;;
    esac
done

if [ ! $PDBSTRUCT ] ; then
    echo "No pdb file introduced!"
    show_usage
    exit 1
fi

if [ ! $NAME ] ; then
    NAME=$PDBSTRUCT
fi

DIRNAME=miniSPQR_$NAME
if [ -d "$DIRNAME" ] ; then
    echo "Directory $DIRNAME already exists. Please rename the output."
    exit 1
fi

echo "Saving output to directory "$DIRNAME
# set positional arguments in their proper place
eval set -- "$PARAMS"
#################

#STEP 1#

mkdir $DIRNAME
if [ $CONVERT ] ; then 
    echo "Creating SPQR pdb format structure..."
    cp $TOOLS_PATH/pdb2spqr.py .
    python pdb2spqr.py $PDBSTRUCT > init.pdb
    rm pdb2spqr.py
else cp $PDBSTRUCT init.pdb
fi

echo "Creating files for clash removal..."
mkdir $DIRNAME/01
MCPARAMS1=(${MC_PARAMS[@]})
SAPARAMS1=(${SA_PARAMS[@]})
#echo ${MCPARAMS1[@]}
MCPARAMS1[5]=$CLASH_NMC
MCPARAMS1[6]=$CLASH_NMC
MCPARAMS1[7]=$CLASH_NMC
#echo ${MCPARAMS1[@]}
MCPARAMS1[11]="$ENERGY_PATH/$INTRAC"
SAPARAMS1[0]=$CLASH_TSA
SAPARAMS1[4]=$CLASH_NSA
#echo write_params $DIRNAME/01/params.spqr ${MCPARAMS1[@]} 1 ${SAPARAMS1[@]}
write_params $DIRNAME/01/params.spqr ${MCPARAMS1[@]} 1 ${SAPARAMS1[@]}
#cp $SRC_DIR/opt.spqr $DIRNAME/01/params.spqr
mkdir $DIRNAME/01/configs $DIRNAME/01/pdb_inits
cp init.pdb $DIRNAME/01/pdb_inits
cp $BIN_PATH/$BINCLASH $DIRNAME/01
cp $BIN_PATH/$BINANNOT $DIRNAME/01

echo "Setting up the parameters for clashing removal..."
#sed -i "s/mc_steps/$CLASH_NMC/g" $DIRNAME/01/params.spqr
#sed -i "s/sa_nt/$CLASH_NSA/g" $DIRNAME/01/params.spqr
#sed -i "s/sa_ti/$CLASH_TSA/g" $DIRNAME/01/params.spqr
#sed -i "s:intrac:$ENERGY_PATH/$INTRAC:g" $DIRNAME/01/params.spqr

echo "Running clash removal annealing..."
cd $DIRNAME/01
#ln -s $ENERGY_PATH/no_bph_intrac.btb 
for iconf in `seq 0 $MPROC`;do
./$BINCLASH $iconf > clash_$NAME.out
done
touch temp1; rm temp1 ; touch temp2 ; rm temp2
for iconf in `seq 0 $MPROC`;do
    IND=`printf %02d $iconf`
    mcconf=`ls configs/chk*p$IND.mc | tail -1`
    ./$BINANNOT $mcconf -t > temp2
    fc=`grep "No clashes found" temp2 | wc | awk '{print $1}'`
    en=`grep "TOTAL ENERGY" temp2 | awk '{print $4}'`
    if [ "$fc" -eq "1" ] ; then echo $mcconf $en >>  temp1 ; fi
done

if [ ! -f temp1 ] ; then echo "There are still clashes in the initial condition. Try increasing the CLASH_NMC variable in the script." ; exit ; fi
NSEL=`wc temp1 | awk '{print $1}'`
sort -g -k 2 temp1 > temp3;
SELECTED=`head -1 temp3 | awk '{print $1}'` ;
rm temp1 temp2 temp3

cd ../..
echo "Clashes removed successfuly"
########
#STEP 2#
echo "Structure refinement: minimization of ERMSD with respect to original structure"
mkdir $DIRNAME/02
#; cp $SRC_DIR/opt.spqr $DIRNAME/02/params.spqr ;
mkdir $DIRNAME/02/configs $DIRNAME/02/pdb_inits
MCPARAMS2=(${MC_PARAMS[@]})
SAPARAMS2=(${SA_PARAMS[@]})
MCPARAMS2[5]=$ERMSD_NMC
MCPARAMS2[6]=$ERMSD_NMC
MCPARAMS2[7]=$ERMSD_NMC
MCPARAMS2[11]=$ENERGY_PATH/$INTRAC
SAPARAMS2[0]=$ERMSD_TSA
SAPARAMS2[4]=$ERMSD_NSA
write_params $DIRNAME/02/params.spqr ${MCPARAMS2[@]} 1 ${SAPARAMS2[@]}
#write_params(MCPARAMS2, SAPARAMS2, $DIRNAME/02/params.spqr, 1)
#sed -i "s/mc_steps/$ERMSD_NMC/g" $DIRNAME/02/params.spqr
#sed -i "s/sa_nt/$ERMSD_NSA/g" $DIRNAME/02/params.spqr
#sed -i "s/sa_ti/$ERMSD_TSA/g" $DIRNAME/02/params.spqr
#sed -i "s:intrac:$ENERGY_PATH/$INTRAC:g" $DIRNAME/02/params.spqr
#echo $SELECTED 
cp $DIRNAME/01/$SELECTED $DIRNAME/02/pdb_inits/init.mc
echo  "REMARK ERMSD PARAMS 1 $ERMSD_PREF $ERMSD_CUTOFF" > ermsd_frags.lst
NATS=`wc init.pdb | awk '{print $1}'`; NGROUPS=`echo $NATS | awk '{print int($1/5)-1}'` 
echo "REMARK ERMSD GROUP `seq 0 $NGROUPS | tr "\n" " " `" >> ermsd_frags.lst
grep -v REMARK init.pdb >> ermsd_frags.lst ; mv ermsd_frags.lst $DIRNAME/02
cp $BIN_PATH/$BINERMSD $DIRNAME/02
cd $DIRNAME/02

#ln -s $ENERGY_PATH/no_bph_intrac.btb
./$BINERMSD params.spqr > ermsd_$NAME.out
#cp final.p* ..
cd ../..

echo "ERMSD minimization successful!"
########
#STEP 3#
echo "Structure refinement: minimization of SPQR energy"
mkdir $DIRNAME/03
#; cp $SRC_DIR/eopt.spqr $DIRNAME/03/params.spqr ;
mkdir $DIRNAME/03/configs $DIRNAME/03/pdb_inits
MCPARAMS3=(${MC_PARAMS[@]})
SAPARAMS3=(${SA_PARAMS[@]})
MCPARAMS3[5]=$ENERG_NMC
MCPARAMS3[6]=$ENERG_NMC
MCPARAMS3[7]=$ENERG_NMC
MCPARAMS3[11]=$ENERGY_PATH/$INTRAC
SAPARAMS3[0]=$ENERG_TSA
SAPARAMS3[4]=$ENERG_NSA                                                                                                                           
write_params $DIRNAME/03/params.spqr ${MCPARAMS3[@]} 1 ${SAPARAMS3[@]}
#write_params(MCPARAMS3, SAPARAMS3, $DIRNAME/03/params.spqr, 1)
#sed -i "s/mc_steps/$ENERG_NMC/g" $DIRNAME/03/params.spqr
#sed -i "s/sa_nt/$ENERG_NSA/g" $DIRNAME/03/params.spqr
#sed -i "s/sa_ti/$ENERG_TSA/g" $DIRNAME/03/params.spqr
#sed -i "s:intrac:$ENERGY_PATH/$INTRAC:g" $DIRNAME/03/params.spqr
#echo $SELECTED
for p in `seq 0 $MPROC` ; do
    pind=`printf %02d $p`
    #cp $DIRNAME/02/configs/chk.`printf %010d $ERMSD_NTO`.p$pind.mc $DIRNAME/03/pdb_inits/init.p$pind.mc
    SEL_ERMSD_FILE=`ls -t $DIRNAME/02/configs/chk*.p$pind.mc | head -1`
    cp $SEL_ERMSD_FILE $DIRNAME/03/pdb_inits/init.p$pind.mc
done
cp $BIN_PATH/$BINENERG $DIRNAME/03
cd $DIRNAME/03

#ln -s $ENERGY_PATH/no_bph_intrac.btb
./$BINENERG params.spqr > energ_$NAME.out
cp final.p* ..
cp configs/chk.last.p*.mc ..
cd ../..
mv init.pdb $DIRNAME
echo "Optimization successfully ended."
########

#################
